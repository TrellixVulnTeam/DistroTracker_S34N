# A template for the local_settings.py file.

# After modifying the needed parameters, rename the file to local_settings.py
from __future__ import unicode_literals

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'pts.db',
        # The following settings are not used with sqlite3:
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}

PTS_DERIVATIVE_NAME = "Debian"
"""The number of days to tolerate bounced messages for subscribers."""
PTS_MAX_DAYS_TOLERATE_BOUNCE = 4
PTS_MAX_ALLOWED_ERRORS_CONTROL_COMMANDS = 5
PTS_CONFIRMATION_EXPIRATION_DAYS = 3

import socket
PTS_FQDN = socket.getfqdn()
PTS_CONTROL_EMAIL = 'control@' + PTS_FQDN
PTS_OWNER_EMAIL = 'owner@' + PTS_FQDN
PTS_BOUNCE_NO_REPLY_EMAIL = 'bounces-likely-spam@' + PTS_FQDN

"""A module with vendor-specific rules which the PTS can plug in to appropriate
functions.

Each rule should be implemented as a callable which takes a defined set of
arguments with a predefined name. The supported callables are:

 - ``get_keyword(local_part, message)`` - takes a local_part of the email
   address to which a message was sent and an email Message object.
   Should return a keyword which matches the message or None if it does not
   match any keyword.
 - ``add_new_headers(received_message, package_name, keyword)`` - 
   takes an email Message object, the name of the package and the keyword
   of the message.
   Should return a list of two-tuples (header_name, header_value) of headers
   which should be added to the response message.
 - ``approve_default_message(message)`` - takes an email Message object.
   Should return a Boolean indicating whether this message should still be
   forwarded to subscribers which are subscribed to the default keyword.
"""
PTS_VENDOR_RULES = 'pts.debian.rules'
